import styled from 'styled-components'

import { useCallback } from 'react'

import { useGameLogic } from '@shared/hooks/useGameLogic'
import type { BlockType } from '@shared/types/game'

import { GameGrid } from './GameGrid'
import { GameHUD } from './GameHUD'
import { ScoreGuide } from './ScoreGuide'
import { SelectionInfo } from './SelectionInfo'

const StyledGameContainer = styled.div`
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
`

const StyledTitle = styled.h1`
    text-align: center;
    color: #2d3436;
    font-size: 32px;
    font-weight: bold;
    margin-bottom: 24px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
`

const StyledInstructions = styled.div`
    background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
    color: white;
    padding: 16px;
    border-radius: 8px;
    margin-bottom: 20px;
    font-size: 14px;
    line-height: 1.5;
`

export const ColorMatchGame = () => {
    const {
        gameState,
        startSelection,
        addToSelection,
        pauseSelection,
        finishSelection,
        confirmSelection,
        cancelPendingSelection,
        resetGame,
    } = useGameLogic(8)

    const handleBlockMouseDown = useCallback(
        (block: BlockType) => {
            if (!gameState.isDragging) {
                startSelection(block)
            }
        },
        [gameState.isDragging, startSelection]
    )

    const handleBlockMouseEnter = useCallback(
        (block: BlockType) => {
            if (
                gameState.isDragging &&
                !gameState.pendingConfirmation
            ) {
                addToSelection(block)
            }
        },
        [
            gameState.isDragging,
            gameState.pendingConfirmation,
            addToSelection,
        ]
    )

    const handleMouseUp = useCallback(() => {
        if (gameState.isDragging) {
            pauseSelection()
        }
    }, [gameState.isDragging, pauseSelection])

    const handleDoubleClick = useCallback(() => {
        if (gameState.isDragging) {
            finishSelection()
        }
    }, [gameState.isDragging, finishSelection])

    return (
        <StyledGameContainer>
            <StyledTitle>ColorMatch Grid</StyledTitle>

            <StyledInstructions>
                <strong>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</strong> –ó–∞–∂–º–∏—Ç–µ –∏ —Ç—è–Ω–∏—Ç–µ –º—ã—à—å
                (–∏–ª–∏ –ø–∞–ª–µ—Ü –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º) –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º –±–ª–æ–∫–∞–º –æ–¥–Ω–æ–≥–æ
                —Ü–≤–µ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ø–æ—á–∫—É. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                –≤—ã–¥–µ–ª–µ–Ω–∏—è. –ú–∏–Ω–∏–º—É–º 2 –±–ª–æ–∫–∞ –¥–ª—è –∑–∞—Å—á—ë—Ç–∞.
                <br />
                <br />
                <strong>üí£ –ë–æ–º–±—ã:</strong> –í–∑—Ä—ã–≤–∞—é—Ç –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏
                (8 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π).
                <br />
                <strong>‚¨ÖÔ∏è‚û°Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã:</strong>{' '}
                –£–Ω–∏—á—Ç–æ–∂–∞—é—Ç –≤—Å—é —Å—Ç—Ä–æ–∫—É.
                <br />
                <strong>‚¨ÜÔ∏è‚¨áÔ∏è –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã:</strong> –£–Ω–∏—á—Ç–æ–∂–∞—é—Ç
                –≤–µ—Å—å —Å—Ç–æ–ª–±–µ—Ü.
                <br />
                –í—Å–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫ –æ—á–∫–∞–º!
            </StyledInstructions>

            <ScoreGuide />

            <GameHUD
                score={gameState.score}
                selectedCount={gameState.selectedBlocks.length}
                onReset={resetGame}
            />

            <GameGrid
                grid={gameState.grid}
                onBlockMouseDown={handleBlockMouseDown}
                onBlockMouseEnter={handleBlockMouseEnter}
                onMouseUp={handleMouseUp}
                onDoubleClick={handleDoubleClick}
            />

            <SelectionInfo
                selectedBlocks={gameState.selectedBlocks}
                isDragging={gameState.isDragging}
                pendingConfirmation={gameState.pendingConfirmation}
                onConfirm={confirmSelection}
                onCancel={cancelPendingSelection}
            />
        </StyledGameContainer>
    )
}
